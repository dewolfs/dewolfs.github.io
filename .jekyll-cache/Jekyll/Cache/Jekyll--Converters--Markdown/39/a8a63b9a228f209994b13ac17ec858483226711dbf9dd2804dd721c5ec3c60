I">#<p>Gone are the days of manual deployments, maintenance and upgrades.  In a cloud native world, infrastructure management is repeatable, automated and version controlled. To reach this goal we must consider template-based deployment technologies.</p>

<h1 id="1-introduction">1. Introduction</h1>

<p>Infrastructure-As-Code is a key element for a successfull DevOps transformation.  Infrastructure and services can be described as code to manage the full lifecycle:</p>
<ul>
  <li>Initial provisioning</li>
  <li>In-serivce maintenance</li>
  <li>Service decommissioning</li>
</ul>

<p>With the ever-increasing pace of development, embracing Infrastructure-As-Code to continuously create your cloud environment is a must. Terraform is a cross computing environment templating language create by Hashicorp. This means we can provision, update and delete resources in all major clouds.  This is a huge differentiator compared to Azure Resource Manager templates where we are limited to deploying resources to Azure.</p>

<p>To get started with Terraform we first need to download the latest Terraform binary from <a href="https://www.terraform.io/downloads.html">https://www.terraform.io/downloads.html</a>.  We will first use Terraform interactively via the CLI.  In a next phase we will implement an CI/CD pipeline in Azure DevOps.</p>

<h1 id="2-code-repository-structure">2. Code Repository Structure</h1>

<p>Our infrastructure code is hosted in the same repository as our application code.  The repository contains several folders which will be used in chronological order.</p>
<ul>
  <li><strong>00_storageAccount</strong>: We want to save our statefile in a remote location (= Azure Storage Account).</li>
  <li><strong>01_backend</strong>: In order to make the switch from local statefile to our remote location we need to execute a configuration.</li>
  <li><strong>02_vnet</strong>: We want to provision an Azure virtual network.</li>
  <li><strong>03_law</strong>: Finally we will deploy an Azure Log Analytics workspace and enable two solutions.</li>
</ul>

<p>Each folder contains the following files:</p>
<ul>
  <li><strong>.gitignore</strong>: The .gitignore file is a text file that tells Git which files or folders to ignore in a project.</li>
  <li><strong>output.tf</strong>: The output file contains the values of the resources which have been created.</li>
  <li><strong>backend.tf</strong>: The backend file consists of the definition where the Terraform state file should be saved.</li>
  <li><strong>provider.tf</strong>: Terraform works with public cloud providers such as Azure/AWS/GCP provider.  The details how to authenticate to the Azure API via Terraform are stored in the provider file.</li>
  <li><strong>terraform.tfvars</strong>: The values for the variables used in our configuration are stored in this file.</li>
  <li><strong>variables.tf</strong>: The definition of the variables used in the Terraform configuration.</li>
  <li><strong>resource-specific.tf</strong>: The actual configuration of what we will deploy.</li>
</ul>

<h1 id="3-authentication-to-azure-api">3. Authentication to Azure API</h1>

<p>The recommended approach to execute your Terraform configuration against the Azure API is by leveraging an Azure AD service principal.  To create a service principal, open the Azure cloud shell via <a href="https://shell.azure.com">https://shell.azure.com</a>.  This service principal will be used to create/modify/delete resources in Azure. Hence the reason why this service principal account will need Contributor rights on our Azure Subscription.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Retrieve the subscription ID</span>
az account list <span class="nt">--output</span> table

<span class="c"># Create a service principal with Contributor rights to our subscription</span>
az ad sp create-for-rbac <span class="nt">--role</span><span class="o">=</span><span class="s2">"Contributor"</span> <span class="nt">--scope</span><span class="o">=</span><span class="s2">"/subscriptions/0000-0000-0000-0000"</span> <span class="nt">--name</span><span class="o">=</span><span class="s2">"sp-p-terraform"</span></code></pre></figure>

<p><img src="/assets/img/2020-06-09-shell-sp.png" alt="Cloud Shell" /></p>

<p>The output of ad sp create command will be used in the next section.</p>

<h1 id="4-variable-definition">4. Variable Definition</h1>

<p>We will now add the details of our Azure AD service principal to our <strong>terraform.tfvars</strong> file.  To make it easy, you can use the following commands:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">ApplicationId</span><span class="o">=</span><span class="si">$(</span>az ad app list <span class="nt">--display-name</span> sp-p-terraform <span class="nt">--query</span> <span class="o">[]</span>.appId <span class="nt">-o</span> tsv<span class="si">)</span>
<span class="nv">TenantId</span><span class="o">=</span><span class="si">$(</span>az account list | jq <span class="nt">-r</span> <span class="s1">'.[].tenantId'</span><span class="si">)</span>
<span class="nv">SubscriptionId</span><span class="o">=</span><span class="si">$(</span>az account list | jq <span class="nt">-r</span> <span class="s1">'.[].id'</span><span class="si">)</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"Subscription_id : </span><span class="nv">$SubscriptionId</span><span class="se">\n</span><span class="s2">Client_id : </span><span class="nv">$ApplicationId</span><span class="se">\n</span><span class="s2">Client_secret : only visible at creation time, not retrievable afterwards</span><span class="se">\n</span><span class="s2">Tenant_id : </span><span class="nv">$TenantId</span><span class="s2">"</span></code></pre></figure>

<p><img src="/assets/img/2020-06-09-shell-sp-output.png" alt="Service Principal" /></p>

<p>Now change “–REPLACE-ME–” in our <strong>terraform.tfvars</strong> example file with the output from the commands above.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">subscription_id                 <span class="o">=</span> <span class="s2">"--REPLACE-ME--"</span>
client_id                       <span class="o">=</span> <span class="s2">"--REPLACE-ME--"</span>
client_secret                   <span class="o">=</span> <span class="s2">"--REPLACE-ME--"</span>
tenant_id                       <span class="o">=</span> <span class="s2">"--REPLACE-ME--"</span></code></pre></figure>

<h1 id="5-terraform-azure-resource-provisioning">5. Terraform Azure Resource Provisioning</h1>

<h2 id="51-storage-account">5.1. Storage Account</h2>
<p>Our first folder contains the necessary configuration to provision an Azure Storage Account.  We avoid to use hard-coded values in our configuration and prefer to use variables.</p>

<p>Enter into the first folder and use the following Terraform CLI workflow:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">terraform init
terraform plan
terraform apply</code></pre></figure>

<p>The storage account gets created with the following output.</p>

<p><img src="/assets/img/2020-06-09-tf-sta-output.png" alt="Storage Account" /></p>

<p>Copy the Access Key from the output into the <strong>backend.tf</strong> file of the different folders <strong>01_backend/02_vnet/03_law</strong>.  Each backend file now contains a specific key per Azure resource and the Access Key of our Azure Storage Account.</p>

<h2 id="52-backend-configuration">5.2. Backend configuration</h2>

<p>Now we will make the switch from local state file to remote statefile.</p>

<p>Move into the folder <strong>01_Backend</strong> and run the command:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">terraform init <span class="nt">-backend-config</span><span class="o">=</span><span class="s2">"backend.tf"</span></code></pre></figure>

<p><img src="/assets/img/2020-06-09-tf-backend.png" alt="Statefile" /></p>

<h2 id="53-virtual-network">5.3. Virtual Network</h2>

<p>Move into the folder <strong>02_vnet</strong> and run the same workflow as before (init-plan-apply).</p>

<p><img src="/assets/img/2020-06-09-tf-vnet-output.png" alt="Virtual Network" /></p>

<h2 id="54-log-analytics-workspace">5.4. Log Analytics Workspace</h2>

<p>Enter into the folder <strong>03_law</strong> and run the same workflow as before (init-plan-apply) to create the Log Analytics workspace together with the two solutions.</p>

<p><img src="/assets/img/2020-06-09-tf-law-plan.png" alt="Virtual Network" /></p>

<p><img src="/assets/img/2020-06-09-tf-law-output.png" alt="Virtual Network" /></p>

<p>Embracing any new technology is a journey of learning and experimentation.</p>

<p><em>The configuration we used in this post can be found on <a href="https://github.com/dewolfs/terraform-azure-base">https://github.com/dewolfs/terraform-azure-base</a>.</em></p>
:ET